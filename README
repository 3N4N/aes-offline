AES Implementation
==================

This is an assignment for level-4/term-1. The guideline for it are below.


Topic
-----

In this assignment you will have to implement the Advanced Encryption Standard
(AES) algorithm for 128-bit key. Total marks of this assignment is 30.


Overview of AES
---------------

Advanced Encryption Standard (AES) is a popular and widely adopted symmetric key
encryption algorithm.

AES uses repeat cycles or "rounds". There are 10, 12, or 14 rounds for keys of
128, 192, and 256 bits, respectively.

Each round of Algorithm consists of four steps:

1. subBytes: for each byte in the array, use its value as an index into a fixed
   256-element lookup table, and replace its value in the state by the byte
   value stored at that location in the table. You can find the table and the
   inverse table on the web.
2. shiftRows: Let Ri denote the ith row in state. Shift R0 in the state left 0
   bytes (i.e., no change); shift R1 left 1 byte; shift R2 left 2 bytes; shift
   R3 left 3 bytes. These are circular shifts. They do not affect the individual
   byte values themselves. Shift left for decryption.
3. mixColumns: for each column of the state, replace the column by its value
   multiplied by a fixed 4 x 4 matrix of integers (in a particular Galois
   Field). This is a relatively complex step, but if you utilize the BitVector
   library demonstrated in the sessional class it will be simple matrix
   multiplication. Note that the inverse operation multiplies by a different
   matrix.
4. addRoundkey: XOR the state with a 128-bit round key derived from the original
   key K by a recursive process.


Task 1: Key Scheduling (7 Marks)
--------------------------------

The key will be provided by the user as ASCII string. If the string length is
less than 16 (16x8 = 128 bit), pad it with ‘0’ and if the length is greater than
16 ignore extra characters.

Implement the key scheduling algorithm in this step and generate keys for all
the rounds. Link of the algorithm:
https://en.wikipedia.org/wiki/AES_key_schedule

Task 2: Encryption (12 Marks)
-----------------------------

The encryption method will encrypt a block of text (128 bit/16 characters) with
the keys generated in 1. You have to divide the input plain text into blocks of
16 characters and encrypt one block at a time. Pad the input string with spaces
if its length is not multiple of 16.

Task 3: Decryption (5 Marks)
----------------------------

Decrypt the encrypted text blocks and observe if they match with the original
text. Also report the execution time.

Task 4: Additional Functionalities (4 Marks)
--------------------------------------------

1. Modify your program so that you can encrypt and decrypt not only text but
   also other objects (e.g., pdf, image etc.)
2. Generate the S-Box and the Inverse S-Box tables instead of using hardcoded
   values. Note that you may use the gf_MI() function of the BitVector module
   for calculating multiplicative inverse. Ref:
   https://en.wikipedia.org/wiki/Rijndael_S-box

Task 5: Bonus (3 Marks)
-----------------------

Generalize your program to accommodate key lengths of 128-bit, 192-bit and
256-bit. Compare and report the execution speed in console.
